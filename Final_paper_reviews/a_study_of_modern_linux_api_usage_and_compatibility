###A Study of Modern Linux API Usage and Compatibility: What to Support When You’re Supporting

*Tsai C C, Jain B, Abdul N A, et al. A study of modern Linux API usage and compatibility: what to support when you're supporting[C]//Proceedings of the Eleventh European Conference on Computer Systems. ACM, 2016: 16.*

<https://www3.cs.stonybrook.edu/~porter/pubs/syspop16.pdf>

(EuroSys'16 Best Paper)

这篇论文研究的是Linux API的使用情况。作者对Ubuntu Linux 15.04发行版的所有应用软件和库进行了调研，并提出了一些指标来刻划系统API到底有多重要，以及有多兼容，同时为开发者和研究者提供了对于评估API复杂性和安全性的洞见。这里的系统API包括系统调用，伪文件，libc的函数。

**动机：**系统工程师和研究者们在设计、优化系统API的时候需要作出取舍、权衡。这些取舍往往取决于一些预先的假设，也就是负载是什么，性能瓶颈在哪里等等。在通用的操作系统中，这些设计考量并不是件容易的事情，设计者们自己主观的假设往往会造成对于API重要性的认知有偏差。所以本文作者的一大动机是：用数据说话，从对API的实际使用情况来量化分析API的重要程度。
另一大动机来源于对API兼容性的考量。更新的API，可能会失去对旧版本的软件的兼容。系统设计者们希望得到对于API兼容性的量化指标（我设计这套API，可以支持多大份额的应用？）。

解决这些问题的关键难点在于用什么数据，怎么针对API在实际中的被使用情况做分析。本文提出了一套解决这些问题的测量方法和量化分析方法，并实际运用到了Ubuntu Linux发行版中，得到了一系列结论。

数据采集方法：对Ubuntu/Debian Linux repository中所有的30976个包的可执行二进制文件和共享库进行了静态分析，对于每一个二进制文件，获得了API的使用足迹。另外通过网络调查数据了解每一个包的的安装数目。这两份数据合并起来，可以评估不同系统API在实际中被用户使用的情况。

（对于API的）API重要性 API Importance
对于给定的API，一个设备中包含至少一个需要用到该API的应用的概率。

（一个系统的）和加权完整性 Weighted completeness
对于一个系统，它支持的应用（占所有应用）的，用应用流行程度加权的比例。

文章中在展示数据的同时，发现的一些有趣的结论：

- 一些系统调用只被少数个别库所包含，并被库API封装，所以开发者依赖它们，因为他们不得不使用这些库（如libc）。
- 一些系统调用用得少，部分原因是有其他功能类似的API更为流行。
- 一些系统调用已经被官方淘汰，但是还是在被使用，原因是为了和老版本的内核向后兼容。
- 在构建原型系统时，必要的向量系统调用只占所有向量系统调用的一小部分。
- 最常用的伪文件包含/dev/null，/proc/cpuinfo，/cpu/meminfo，/dev/urandom等等。/dev中最常用的伪文件是/dev/tty，/dev/console，/dev/pts，/dev/urandom等等。
- 分解或者重排序库API可以减小典型应用程序的内存开销（很多库API没被用到）。
- 在多个不同的系统调用变种中，开发者倾向于使用更加易移植的，或更简单的API。

等等。

文章中还分析了构建原型系统的一种增加系统调用的“最优路线”：假设我从头设计实现一个系统，最先应当实现哪些系统调用，其次应当实现哪些系统调用，等等。我的目的是使系统加权完整性的增速最快，也就是最快地让系统兼容支持更多的应用软件。数据分析结论是最初10%和最后10%的系统调用对于系统完整性的增长率最小（系统完整性按时间呈S型曲线增长）。这可以给系统开发者的开发考量提供一些量化的指导依据。

文章还分析了功能类似，但安全性不同的多个API的重要性，得到结论说新的变种（更安全实现的）API被接受的进程总是比较慢。

文章对数据展示的主要方式是统计计数和CDF曲线。

关于操作系统API的研究并不是什么新鲜的主题，但是此文的研究者们提出了一种新的量化地衡量平台兼容性的方法。我觉得这项工作最有趣的部分是研究者们在论文中提出的两个指标：API重要性，和加权完整性。这两个指标的定义非常简洁，但是非常有用，它们不论对于单个API还是对于操作系统的设计和优化空间相关的分析研究提供了一种新颖的量化方法。

**文章的不足：**静态分析的方法只能猜测API是否潜在地被使用了，但不知道API被使用的频率。

某些API可能只对一小部分软件非常重要，但本文提出的指标不能区分这种“不普遍重要的API”和“完全不重要的API”。所以本文所分析的“重要性”实际上是一种“对各种不同软件的普遍的重要性”。
